// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.rickdane.springmodularizedproject.module.webgatherer.web;

import com.rickdane.springmodularizedproject.domain.User;
import com.rickdane.springmodularizedproject.module.webgatherer.domain.ProcessStatus;
import com.rickdane.springmodularizedproject.module.webgatherer.domain.Scraper;
import com.rickdane.springmodularizedproject.module.webgatherer.web.ScraperController;
import java.util.List;
import java.util.Set;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

privileged aspect ScraperController_Roo_Controller_Json {
    
    @RequestMapping(value = "/{id}", headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> ScraperController.showJson(@PathVariable("id") Long id) {
        Scraper scraper = Scraper.findScraper(id);
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        if (scraper == null) {
            return new ResponseEntity<String>(headers, HttpStatus.NOT_FOUND);
        }
        return new ResponseEntity<String>(scraper.toJson(), headers, HttpStatus.OK);
    }
    
    @RequestMapping(headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> ScraperController.listJson() {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        List<Scraper> result = Scraper.findAllScrapers();
        return new ResponseEntity<String>(Scraper.toJsonArray(result), headers, HttpStatus.OK);
    }
    
    @RequestMapping(method = RequestMethod.POST, headers = "Accept=application/json")
    public ResponseEntity<String> ScraperController.createFromJson(@RequestBody String json) {
        Scraper scraper = Scraper.fromJsonToScraper(json);
        scraper.persist();
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json");
        return new ResponseEntity<String>(headers, HttpStatus.CREATED);
    }
    
    @RequestMapping(value = "/jsonArray", method = RequestMethod.POST, headers = "Accept=application/json")
    public ResponseEntity<String> ScraperController.createFromJsonArray(@RequestBody String json) {
        for (Scraper scraper: Scraper.fromJsonArrayToScrapers(json)) {
            scraper.persist();
        }
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json");
        return new ResponseEntity<String>(headers, HttpStatus.CREATED);
    }
    
    @RequestMapping(method = RequestMethod.PUT, headers = "Accept=application/json")
    public ResponseEntity<String> ScraperController.updateFromJson(@RequestBody String json) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json");
        Scraper scraper = Scraper.fromJsonToScraper(json);
        if (scraper.merge() == null) {
            return new ResponseEntity<String>(headers, HttpStatus.NOT_FOUND);
        }
        return new ResponseEntity<String>(headers, HttpStatus.OK);
    }
    
    @RequestMapping(value = "/jsonArray", method = RequestMethod.PUT, headers = "Accept=application/json")
    public ResponseEntity<String> ScraperController.updateFromJsonArray(@RequestBody String json) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json");
        for (Scraper scraper: Scraper.fromJsonArrayToScrapers(json)) {
            if (scraper.merge() == null) {
                return new ResponseEntity<String>(headers, HttpStatus.NOT_FOUND);
            }
        }
        return new ResponseEntity<String>(headers, HttpStatus.OK);
    }
    
    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE, headers = "Accept=application/json")
    public ResponseEntity<String> ScraperController.deleteFromJson(@PathVariable("id") Long id) {
        Scraper scraper = Scraper.findScraper(id);
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json");
        if (scraper == null) {
            return new ResponseEntity<String>(headers, HttpStatus.NOT_FOUND);
        }
        scraper.remove();
        return new ResponseEntity<String>(headers, HttpStatus.OK);
    }
    
    @RequestMapping(params = "find=ByStatus", headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> ScraperController.jsonFindScrapersByStatus(@RequestParam("status") ProcessStatus status) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        return new ResponseEntity<String>(Scraper.toJsonArray(Scraper.findScrapersByStatus(status).getResultList()), headers, HttpStatus.OK);
    }
    
    @RequestMapping(params = "find=ByStatusAndUserOwner", headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> ScraperController.jsonFindScrapersByStatusAndUserOwner(@RequestParam("status") ProcessStatus status, @RequestParam("userOwner") Set<User> userOwner) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        return new ResponseEntity<String>(Scraper.toJsonArray(Scraper.findScrapersByStatusAndUserOwner(status, userOwner).getResultList()), headers, HttpStatus.OK);
    }
    
    @RequestMapping(params = "find=ByUserOwner", headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> ScraperController.jsonFindScrapersByUserOwner(@RequestParam("userOwner") Set<User> userOwner) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        return new ResponseEntity<String>(Scraper.toJsonArray(Scraper.findScrapersByUserOwner(userOwner).getResultList()), headers, HttpStatus.OK);
    }
    
}
