// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.rickdane.springmodularizedproject.module.webgatherer.domain;

import com.rickdane.springmodularizedproject.domain.User;
import com.rickdane.springmodularizedproject.module.webgatherer.domain.ProcessStatus;
import com.rickdane.springmodularizedproject.module.webgatherer.domain.Scraper;
import java.util.Set;
import javax.persistence.EntityManager;
import javax.persistence.TypedQuery;

privileged aspect Scraper_Roo_Finder {
    
    public static TypedQuery<Scraper> Scraper.findScrapersByStatus(ProcessStatus status) {
        if (status == null) throw new IllegalArgumentException("The status argument is required");
        EntityManager em = Scraper.entityManager();
        TypedQuery<Scraper> q = em.createQuery("SELECT o FROM Scraper AS o WHERE o.status = :status", Scraper.class);
        q.setParameter("status", status);
        return q;
    }
    
    public static TypedQuery<Scraper> Scraper.findScrapersByStatusAndUserOwner(ProcessStatus status, Set<User> userOwner) {
        if (status == null) throw new IllegalArgumentException("The status argument is required");
        if (userOwner == null) throw new IllegalArgumentException("The userOwner argument is required");
        EntityManager em = Scraper.entityManager();
        StringBuilder queryBuilder = new StringBuilder("SELECT o FROM Scraper AS o WHERE o.status = :status AND");
        for (int i = 0; i < userOwner.size(); i++) {
            if (i > 0) queryBuilder.append(" AND");
            queryBuilder.append(" :userOwner_item").append(i).append(" MEMBER OF o.userOwner");
        }
        TypedQuery<Scraper> q = em.createQuery(queryBuilder.toString(), Scraper.class);
        q.setParameter("status", status);
        int userOwnerIndex = 0;
        for (User _user: userOwner) {
            q.setParameter("userOwner_item" + userOwnerIndex++, _user);
        }
        return q;
    }
    
    public static TypedQuery<Scraper> Scraper.findScrapersByUserOwner(Set<User> userOwner) {
        if (userOwner == null) throw new IllegalArgumentException("The userOwner argument is required");
        EntityManager em = Scraper.entityManager();
        StringBuilder queryBuilder = new StringBuilder("SELECT o FROM Scraper AS o WHERE");
        for (int i = 0; i < userOwner.size(); i++) {
            if (i > 0) queryBuilder.append(" AND");
            queryBuilder.append(" :userOwner_item").append(i).append(" MEMBER OF o.userOwner");
        }
        TypedQuery<Scraper> q = em.createQuery(queryBuilder.toString(), Scraper.class);
        int userOwnerIndex = 0;
        for (User _user: userOwner) {
            q.setParameter("userOwner_item" + userOwnerIndex++, _user);
        }
        return q;
    }
    
}
