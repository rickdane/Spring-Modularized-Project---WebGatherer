// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.rickdane.springmodularizedproject.module.webgatherer.domain;

import com.rickdane.springmodularizedproject.module.consumabledata.domain.Campaign;
import com.rickdane.springmodularizedproject.module.webgatherer.domain.Rawscrapeddata;
import com.rickdane.springmodularizedproject.module.webgatherer.domain.Rawscrapeddatamigrationstatus;
import java.util.Set;
import javax.persistence.EntityManager;
import javax.persistence.TypedQuery;

privileged aspect Rawscrapeddata_Roo_Finder {
    
    public static TypedQuery<Rawscrapeddata> Rawscrapeddata.findRawscrapeddatasByRawscrapeddatamigrationstatus(Rawscrapeddatamigrationstatus rawscrapeddatamigrationstatus) {
        if (rawscrapeddatamigrationstatus == null) throw new IllegalArgumentException("The rawscrapeddatamigrationstatus argument is required");
        EntityManager em = Rawscrapeddata.entityManager();
        TypedQuery<Rawscrapeddata> q = em.createQuery("SELECT o FROM Rawscrapeddata AS o WHERE o.rawscrapeddatamigrationstatus = :rawscrapeddatamigrationstatus", Rawscrapeddata.class);
        q.setParameter("rawscrapeddatamigrationstatus", rawscrapeddatamigrationstatus);
        return q;
    }
    
    public static TypedQuery<Rawscrapeddata> Rawscrapeddata.findRawscrapeddatasByRawscrapeddatamigrationstatusAndCampaign(Rawscrapeddatamigrationstatus rawscrapeddatamigrationstatus, Set<Campaign> campaign) {
        if (rawscrapeddatamigrationstatus == null) throw new IllegalArgumentException("The rawscrapeddatamigrationstatus argument is required");
        if (campaign == null) throw new IllegalArgumentException("The campaign argument is required");
        EntityManager em = Rawscrapeddata.entityManager();
        StringBuilder queryBuilder = new StringBuilder("SELECT o FROM Rawscrapeddata AS o WHERE o.rawscrapeddatamigrationstatus = :rawscrapeddatamigrationstatus AND");
        for (int i = 0; i < campaign.size(); i++) {
            if (i > 0) queryBuilder.append(" AND");
            queryBuilder.append(" :campaign_item").append(i).append(" MEMBER OF o.campaign");
        }
        TypedQuery<Rawscrapeddata> q = em.createQuery(queryBuilder.toString(), Rawscrapeddata.class);
        q.setParameter("rawscrapeddatamigrationstatus", rawscrapeddatamigrationstatus);
        int campaignIndex = 0;
        for (Campaign _campaign: campaign) {
            q.setParameter("campaign_item" + campaignIndex++, _campaign);
        }
        return q;
    }
    
}
