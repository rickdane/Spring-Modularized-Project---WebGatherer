// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.rickdane.springmodularizedproject.module.webgatherer.domain;

import com.rickdane.springmodularizedproject.module.consumabledata.domain.Campaign;
import com.rickdane.springmodularizedproject.module.webgatherer.domain.Rawscrapeddata;
import com.rickdane.springmodularizedproject.module.webgatherer.domain.RawscrapeddataEmailScrapeAttempted;
import com.rickdane.springmodularizedproject.module.webgatherer.domain.Rawscrapeddatamigrationstatus;
import javax.persistence.EntityManager;
import javax.persistence.TypedQuery;

privileged aspect Rawscrapeddata_Roo_Finder {
    
    public static TypedQuery<Rawscrapeddata> Rawscrapeddata.findRawscrapeddatasByCampaignAndRawscrapeddatamigrationstatusAndRawscrapeddataEmailScrapeAttempted(Campaign campaign, Rawscrapeddatamigrationstatus rawscrapeddatamigrationstatus, RawscrapeddataEmailScrapeAttempted rawscrapeddataEmailScrapeAttempted) {
        if (campaign == null) throw new IllegalArgumentException("The campaign argument is required");
        if (rawscrapeddatamigrationstatus == null) throw new IllegalArgumentException("The rawscrapeddatamigrationstatus argument is required");
        if (rawscrapeddataEmailScrapeAttempted == null) throw new IllegalArgumentException("The rawscrapeddataEmailScrapeAttempted argument is required");
        EntityManager em = Rawscrapeddata.entityManager();
        TypedQuery<Rawscrapeddata> q = em.createQuery("SELECT o FROM Rawscrapeddata AS o WHERE o.campaign = :campaign AND o.rawscrapeddatamigrationstatus = :rawscrapeddatamigrationstatus AND o.rawscrapeddataEmailScrapeAttempted = :rawscrapeddataEmailScrapeAttempted", Rawscrapeddata.class);
        q.setParameter("campaign", campaign);
        q.setParameter("rawscrapeddatamigrationstatus", rawscrapeddatamigrationstatus);
        q.setParameter("rawscrapeddataEmailScrapeAttempted", rawscrapeddataEmailScrapeAttempted);
        return q;
    }
    
    public static TypedQuery<Rawscrapeddata> Rawscrapeddata.findRawscrapeddatasByRawscrapeddatamigrationstatus(Rawscrapeddatamigrationstatus rawscrapeddatamigrationstatus) {
        if (rawscrapeddatamigrationstatus == null) throw new IllegalArgumentException("The rawscrapeddatamigrationstatus argument is required");
        EntityManager em = Rawscrapeddata.entityManager();
        TypedQuery<Rawscrapeddata> q = em.createQuery("SELECT o FROM Rawscrapeddata AS o WHERE o.rawscrapeddatamigrationstatus = :rawscrapeddatamigrationstatus", Rawscrapeddata.class);
        q.setParameter("rawscrapeddatamigrationstatus", rawscrapeddatamigrationstatus);
        return q;
    }
    
    public static TypedQuery<Rawscrapeddata> Rawscrapeddata.findRawscrapeddatasByRawscrapeddatamigrationstatusAndCampaign(Rawscrapeddatamigrationstatus rawscrapeddatamigrationstatus, Campaign campaign) {
        if (rawscrapeddatamigrationstatus == null) throw new IllegalArgumentException("The rawscrapeddatamigrationstatus argument is required");
        if (campaign == null) throw new IllegalArgumentException("The campaign argument is required");
        EntityManager em = Rawscrapeddata.entityManager();
        TypedQuery<Rawscrapeddata> q = em.createQuery("SELECT o FROM Rawscrapeddata AS o WHERE o.rawscrapeddatamigrationstatus = :rawscrapeddatamigrationstatus AND o.campaign = :campaign", Rawscrapeddata.class);
        q.setParameter("rawscrapeddatamigrationstatus", rawscrapeddatamigrationstatus);
        q.setParameter("campaign", campaign);
        return q;
    }
    
    public static TypedQuery<Rawscrapeddata> Rawscrapeddata.findRawscrapeddatasByRawscrapeddatamigrationstatusAndRawscrapeddataEmailScrapeAttempted(Rawscrapeddatamigrationstatus rawscrapeddatamigrationstatus, RawscrapeddataEmailScrapeAttempted rawscrapeddataEmailScrapeAttempted) {
        if (rawscrapeddatamigrationstatus == null) throw new IllegalArgumentException("The rawscrapeddatamigrationstatus argument is required");
        if (rawscrapeddataEmailScrapeAttempted == null) throw new IllegalArgumentException("The rawscrapeddataEmailScrapeAttempted argument is required");
        EntityManager em = Rawscrapeddata.entityManager();
        TypedQuery<Rawscrapeddata> q = em.createQuery("SELECT o FROM Rawscrapeddata AS o WHERE o.rawscrapeddatamigrationstatus = :rawscrapeddatamigrationstatus AND o.rawscrapeddataEmailScrapeAttempted = :rawscrapeddataEmailScrapeAttempted", Rawscrapeddata.class);
        q.setParameter("rawscrapeddatamigrationstatus", rawscrapeddatamigrationstatus);
        q.setParameter("rawscrapeddataEmailScrapeAttempted", rawscrapeddataEmailScrapeAttempted);
        return q;
    }
    
}
