// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.rickdane.springmodularizedproject.module.webgatherer.web;

import com.rickdane.springmodularizedproject.module.consumabledata.domain.Campaign;
import com.rickdane.springmodularizedproject.module.webgatherer.domain.Rawscrapeddata;
import com.rickdane.springmodularizedproject.module.webgatherer.domain.RawscrapeddataEmailScrapeAttempted;
import com.rickdane.springmodularizedproject.module.webgatherer.domain.Rawscrapeddatamigrationstatus;
import com.rickdane.springmodularizedproject.module.webgatherer.web.RawscrapeddataController;
import java.util.List;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

privileged aspect RawscrapeddataController_Roo_Controller_Json {
    
    @RequestMapping(value = "/{id}", headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> RawscrapeddataController.showJson(@PathVariable("id") Long id) {
        Rawscrapeddata rawscrapeddata = Rawscrapeddata.findRawscrapeddata(id);
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        if (rawscrapeddata == null) {
            return new ResponseEntity<String>(headers, HttpStatus.NOT_FOUND);
        }
        return new ResponseEntity<String>(rawscrapeddata.toJson(), headers, HttpStatus.OK);
    }
    
    @RequestMapping(headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> RawscrapeddataController.listJson() {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        List<Rawscrapeddata> result = Rawscrapeddata.findAllRawscrapeddatas();
        return new ResponseEntity<String>(Rawscrapeddata.toJsonArray(result), headers, HttpStatus.OK);
    }
    
    @RequestMapping(value = "/jsonArray", method = RequestMethod.POST, headers = "Accept=application/json")
    public ResponseEntity<String> RawscrapeddataController.createFromJsonArray(@RequestBody String json) {
        for (Rawscrapeddata rawscrapeddata: Rawscrapeddata.fromJsonArrayToRawscrapeddatas(json)) {
            rawscrapeddata.persist();
        }
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json");
        return new ResponseEntity<String>(headers, HttpStatus.CREATED);
    }
    
    @RequestMapping(value = "/jsonArray", method = RequestMethod.PUT, headers = "Accept=application/json")
    public ResponseEntity<String> RawscrapeddataController.updateFromJsonArray(@RequestBody String json) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json");
        for (Rawscrapeddata rawscrapeddata: Rawscrapeddata.fromJsonArrayToRawscrapeddatas(json)) {
            if (rawscrapeddata.merge() == null) {
                return new ResponseEntity<String>(headers, HttpStatus.NOT_FOUND);
            }
        }
        return new ResponseEntity<String>(headers, HttpStatus.OK);
    }
    
    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE, headers = "Accept=application/json")
    public ResponseEntity<String> RawscrapeddataController.deleteFromJson(@PathVariable("id") Long id) {
        Rawscrapeddata rawscrapeddata = Rawscrapeddata.findRawscrapeddata(id);
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json");
        if (rawscrapeddata == null) {
            return new ResponseEntity<String>(headers, HttpStatus.NOT_FOUND);
        }
        rawscrapeddata.remove();
        return new ResponseEntity<String>(headers, HttpStatus.OK);
    }
    
    @RequestMapping(params = "find=ByCampaignAndRawscrapeddatamigrationstatusAndRawscrapeddataEmailScrapeAttempted", headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> RawscrapeddataController.jsonFindRawscrapeddatasByCampaignAndRawscrapeddatamigrationstatusAndRawscrapeddataEmailScrapeAttempted(@RequestParam("campaign") Campaign campaign, @RequestParam("rawscrapeddatamigrationstatus") Rawscrapeddatamigrationstatus rawscrapeddatamigrationstatus, @RequestParam("rawscrapeddataEmailScrapeAttempted") RawscrapeddataEmailScrapeAttempted rawscrapeddataEmailScrapeAttempted) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        return new ResponseEntity<String>(Rawscrapeddata.toJsonArray(Rawscrapeddata.findRawscrapeddatasByCampaignAndRawscrapeddatamigrationstatusAndRawscrapeddataEmailScrapeAttempted(campaign, rawscrapeddatamigrationstatus, rawscrapeddataEmailScrapeAttempted).getResultList()), headers, HttpStatus.OK);
    }
    
    @RequestMapping(params = "find=ByRawscrapeddatamigrationstatus", headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> RawscrapeddataController.jsonFindRawscrapeddatasByRawscrapeddatamigrationstatus(@RequestParam("rawscrapeddatamigrationstatus") Rawscrapeddatamigrationstatus rawscrapeddatamigrationstatus) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        return new ResponseEntity<String>(Rawscrapeddata.toJsonArray(Rawscrapeddata.findRawscrapeddatasByRawscrapeddatamigrationstatus(rawscrapeddatamigrationstatus).getResultList()), headers, HttpStatus.OK);
    }
    
    @RequestMapping(params = "find=ByRawscrapeddatamigrationstatusAndCampaign", headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> RawscrapeddataController.jsonFindRawscrapeddatasByRawscrapeddatamigrationstatusAndCampaign(@RequestParam("rawscrapeddatamigrationstatus") Rawscrapeddatamigrationstatus rawscrapeddatamigrationstatus, @RequestParam("campaign") Campaign campaign) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        return new ResponseEntity<String>(Rawscrapeddata.toJsonArray(Rawscrapeddata.findRawscrapeddatasByRawscrapeddatamigrationstatusAndCampaign(rawscrapeddatamigrationstatus, campaign).getResultList()), headers, HttpStatus.OK);
    }
    
    @RequestMapping(params = "find=ByRawscrapeddatamigrationstatusAndRawscrapeddataEmailScrapeAttempted", headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> RawscrapeddataController.jsonFindRawscrapeddatasByRawscrapeddatamigrationstatusAndRawscrapeddataEmailScrapeAttempted(@RequestParam("rawscrapeddatamigrationstatus") Rawscrapeddatamigrationstatus rawscrapeddatamigrationstatus, @RequestParam("rawscrapeddataEmailScrapeAttempted") RawscrapeddataEmailScrapeAttempted rawscrapeddataEmailScrapeAttempted) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        return new ResponseEntity<String>(Rawscrapeddata.toJsonArray(Rawscrapeddata.findRawscrapeddatasByRawscrapeddatamigrationstatusAndRawscrapeddataEmailScrapeAttempted(rawscrapeddatamigrationstatus, rawscrapeddataEmailScrapeAttempted).getResultList()), headers, HttpStatus.OK);
    }
    
}
