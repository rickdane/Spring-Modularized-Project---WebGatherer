// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.rickdane.springmodularizedproject.module.consumabledata.web;

import com.rickdane.springmodularizedproject.module.consumabledata.domain.Emailaddress;
import com.rickdane.springmodularizedproject.module.consumabledata.domain.Website;
import com.rickdane.springmodularizedproject.module.consumabledata.web.EmailaddressController;
import java.util.List;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

privileged aspect EmailaddressController_Roo_Controller_Json {
    
    @RequestMapping(value = "/{id}", headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> EmailaddressController.showJson(@PathVariable("id") Long id) {
        Emailaddress emailaddress = Emailaddress.findEmailaddress(id);
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        if (emailaddress == null) {
            return new ResponseEntity<String>(headers, HttpStatus.NOT_FOUND);
        }
        return new ResponseEntity<String>(emailaddress.toJson(), headers, HttpStatus.OK);
    }
    
    @RequestMapping(headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> EmailaddressController.listJson() {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        List<Emailaddress> result = Emailaddress.findAllEmailaddresses();
        return new ResponseEntity<String>(Emailaddress.toJsonArray(result), headers, HttpStatus.OK);
    }
    
    @RequestMapping(method = RequestMethod.POST, headers = "Accept=application/json")
    public ResponseEntity<String> EmailaddressController.createFromJson(@RequestBody String json) {
        Emailaddress emailaddress = Emailaddress.fromJsonToEmailaddress(json);
        emailaddress.persist();
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json");
        return new ResponseEntity<String>(headers, HttpStatus.CREATED);
    }
    
    @RequestMapping(value = "/jsonArray", method = RequestMethod.POST, headers = "Accept=application/json")
    public ResponseEntity<String> EmailaddressController.createFromJsonArray(@RequestBody String json) {
        for (Emailaddress emailaddress: Emailaddress.fromJsonArrayToEmailaddresses(json)) {
            emailaddress.persist();
        }
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json");
        return new ResponseEntity<String>(headers, HttpStatus.CREATED);
    }
    
    @RequestMapping(method = RequestMethod.PUT, headers = "Accept=application/json")
    public ResponseEntity<String> EmailaddressController.updateFromJson(@RequestBody String json) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json");
        Emailaddress emailaddress = Emailaddress.fromJsonToEmailaddress(json);
        if (emailaddress.merge() == null) {
            return new ResponseEntity<String>(headers, HttpStatus.NOT_FOUND);
        }
        return new ResponseEntity<String>(headers, HttpStatus.OK);
    }
    
    @RequestMapping(value = "/jsonArray", method = RequestMethod.PUT, headers = "Accept=application/json")
    public ResponseEntity<String> EmailaddressController.updateFromJsonArray(@RequestBody String json) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json");
        for (Emailaddress emailaddress: Emailaddress.fromJsonArrayToEmailaddresses(json)) {
            if (emailaddress.merge() == null) {
                return new ResponseEntity<String>(headers, HttpStatus.NOT_FOUND);
            }
        }
        return new ResponseEntity<String>(headers, HttpStatus.OK);
    }
    
    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE, headers = "Accept=application/json")
    public ResponseEntity<String> EmailaddressController.deleteFromJson(@PathVariable("id") Long id) {
        Emailaddress emailaddress = Emailaddress.findEmailaddress(id);
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json");
        if (emailaddress == null) {
            return new ResponseEntity<String>(headers, HttpStatus.NOT_FOUND);
        }
        emailaddress.remove();
        return new ResponseEntity<String>(headers, HttpStatus.OK);
    }
    
    @RequestMapping(params = "find=ByEmailEqualsAndWebsite", headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> EmailaddressController.jsonFindEmailaddressesByEmailEqualsAndWebsite(@RequestParam("email") String email, @RequestParam("website") Website website) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        return new ResponseEntity<String>(Emailaddress.toJsonArray(Emailaddress.findEmailaddressesByEmailEqualsAndWebsite(email, website).getResultList()), headers, HttpStatus.OK);
    }
    
    @RequestMapping(params = "find=ByWebsite", headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> EmailaddressController.jsonFindEmailaddressesByWebsite(@RequestParam("website") Website website) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        return new ResponseEntity<String>(Emailaddress.toJsonArray(Emailaddress.findEmailaddressesByWebsite(website).getResultList()), headers, HttpStatus.OK);
    }
    
    @RequestMapping(params = "find=ByWebsiteAndDateLastSentIsNull", headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> EmailaddressController.jsonFindEmailaddressesByWebsiteAndDateLastSentIsNull(@RequestParam("website") Website website) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        return new ResponseEntity<String>(Emailaddress.toJsonArray(Emailaddress.findEmailaddressesByWebsiteAndDateLastSentIsNull(website).getResultList()), headers, HttpStatus.OK);
    }
    
}
