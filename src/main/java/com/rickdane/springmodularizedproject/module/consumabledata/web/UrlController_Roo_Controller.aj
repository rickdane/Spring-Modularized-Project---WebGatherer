// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.rickdane.springmodularizedproject.module.consumabledata.web;

import com.rickdane.springmodularizedproject.module.consumabledata.domain.Campaign;
import com.rickdane.springmodularizedproject.module.consumabledata.domain.Url;
import com.rickdane.springmodularizedproject.module.consumabledata.domain.UrlStatus;
import com.rickdane.springmodularizedproject.module.consumabledata.domain.Website;
import com.rickdane.springmodularizedproject.module.consumabledata.web.UrlController;
import java.io.UnsupportedEncodingException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.util.UriUtils;
import org.springframework.web.util.WebUtils;

privileged aspect UrlController_Roo_Controller {
    
    @RequestMapping(method = RequestMethod.POST, produces = "text/html")
    public String UrlController.create(@Valid Url url, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            populateEditForm(uiModel, url);
            return "urls/create";
        }
        uiModel.asMap().clear();
        url.persist();
        return "redirect:/urls/" + encodeUrlPathSegment(url.getId().toString(), httpServletRequest);
    }
    
    @RequestMapping(params = "form", produces = "text/html")
    public String UrlController.createForm(Model uiModel) {
        populateEditForm(uiModel, new Url());
        List<String[]> dependencies = new ArrayList<String[]>();
        if (Campaign.countCampaigns() == 0) {
            dependencies.add(new String[] { "campaign", "campaigns" });
        }
        if (Website.countWebsites() == 0) {
            dependencies.add(new String[] { "website", "websites" });
        }
        uiModel.addAttribute("dependencies", dependencies);
        return "urls/create";
    }
    
    @RequestMapping(value = "/{id}", produces = "text/html")
    public String UrlController.show(@PathVariable("id") Long id, Model uiModel) {
        addDateTimeFormatPatterns(uiModel);
        uiModel.addAttribute("url", Url.findUrl(id));
        uiModel.addAttribute("itemId", id);
        return "urls/show";
    }
    
    @RequestMapping(produces = "text/html")
    public String UrlController.list(@RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model uiModel) {
        if (page != null || size != null) {
            int sizeNo = size == null ? 10 : size.intValue();
            final int firstResult = page == null ? 0 : (page.intValue() - 1) * sizeNo;
            uiModel.addAttribute("urls", Url.findUrlEntries(firstResult, sizeNo));
            float nrOfPages = (float) Url.countUrls() / sizeNo;
            uiModel.addAttribute("maxPages", (int) ((nrOfPages > (int) nrOfPages || nrOfPages == 0.0) ? nrOfPages + 1 : nrOfPages));
        } else {
            uiModel.addAttribute("urls", Url.findAllUrls());
        }
        addDateTimeFormatPatterns(uiModel);
        return "urls/list";
    }
    
    @RequestMapping(method = RequestMethod.PUT, produces = "text/html")
    public String UrlController.update(@Valid Url url, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            populateEditForm(uiModel, url);
            return "urls/update";
        }
        uiModel.asMap().clear();
        url.merge();
        return "redirect:/urls/" + encodeUrlPathSegment(url.getId().toString(), httpServletRequest);
    }
    
    @RequestMapping(value = "/{id}", params = "form", produces = "text/html")
    public String UrlController.updateForm(@PathVariable("id") Long id, Model uiModel) {
        populateEditForm(uiModel, Url.findUrl(id));
        return "urls/update";
    }
    
    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE, produces = "text/html")
    public String UrlController.delete(@PathVariable("id") Long id, @RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model uiModel) {
        Url url = Url.findUrl(id);
        url.remove();
        uiModel.asMap().clear();
        uiModel.addAttribute("page", (page == null) ? "1" : page.toString());
        uiModel.addAttribute("size", (size == null) ? "10" : size.toString());
        return "redirect:/urls";
    }
    
    void UrlController.populateEditForm(Model uiModel, Url url) {
        uiModel.addAttribute("url", url);
        addDateTimeFormatPatterns(uiModel);
        uiModel.addAttribute("campaigns", Campaign.findAllCampaigns());
        uiModel.addAttribute("urlstatuses", Arrays.asList(UrlStatus.values()));
        uiModel.addAttribute("websites", Website.findAllWebsites());
    }
    
    String UrlController.encodeUrlPathSegment(String pathSegment, HttpServletRequest httpServletRequest) {
        String enc = httpServletRequest.getCharacterEncoding();
        if (enc == null) {
            enc = WebUtils.DEFAULT_CHARACTER_ENCODING;
        }
        try {
            pathSegment = UriUtils.encodePathSegment(pathSegment, enc);
        } catch (UnsupportedEncodingException uee) {}
        return pathSegment;
    }
    
}
